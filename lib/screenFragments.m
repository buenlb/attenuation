% This function is used to determine which fragments can provide an
% accurate measure of attenuation based on the thickness relative to the
% pulse length at 500 kHz.
% 
% @INPUTS
%   FragData: struct containing information about fragments including
%       attenuation measurements. This struct is generated by
%       generateSharedData.m
%   include120: Toggles whether or not to include 2_120M, the fragment that
%       has much larger pores than any other. Optional. Defaults to 0.
%   threshold: dB cutoff used to determine the spatial pulse lenght.
%       Optional, defaults to 11 dB.
% 
% @OUTPUTS
%   idx500: Index of framgents within FragData that provide reasonable
%       attenuation measurements
%   idx1000: Index of framgents within FragData that provide reasonable
%       attenuation measurements for the 1 MHz pulse
%   idx2250: Index of framgents within FragData that provide reasonable
%       attenuation measurements for the 2.25 MHz pulse
%   idx500Layers: Same as idx500 but without the fragments from unknown
%       layers
%   idx1000Layers: Same as idx1000 but without the fragments from unknown
%       layers
%   idx2250Layers: Same as idx2250 but without the fragments from unknown
%       layers
%   sk1: Index corresponding to fragments from skull 1
%   sk2: Index corresponding to fragments from skull 2
%   it: Index of fragments from the inner table
%   ot: Index of fragments from the outer table
%   md: index of fragments from the medullary
% 
% Taylor Webb
% Summer 2019

function [idx500,idx1000,idx2250,idx500Layers,idx1000Layers,idx2250Layers,sk1,sk2,it,ot,md] = screenFragments(FragData,include120,threshold)

if ~exist('threshold','var')
    threshold = 11;
end

% Since I don't know how many fragmens are large enough, ignore the error 
% about an array growing through a loop
%#ok<*AGROW>

if nargin < 2
    % 11 dB is the threshold at which, assuming a reflection coefficient of
    % 0.6, the signal is at least 20 dB down after multiple reflections
    include120 = 0;
end

%------------------------------------------------------------------------%
% 0.5 MHz
%------------------------------------------------------------------------%
s = FragData(1).Attenuation.kHz500.RawData.pnb{1};
t = FragData(1).Attenuation.kHz500.RawData.t;

idx_11dB = find(20*log10(abs(s)/max(abs(s)))>=-threshold);
pulseLength = t(idx_11dB(end))-t(idx_11dB(1));

%------------------------------------------------------------------------%
% 1 MHz
%------------------------------------------------------------------------%
s = FragData(5).Attenuation.kHz1000.RawData.pnb{1};
t = FragData(5).Attenuation.kHz1000.RawData.t;

idx_11dB = find(20*log10(abs(s)/max(abs(s)))>=-threshold);
pulseLength1000 = t(idx_11dB(end))-t(idx_11dB(1));

%------------------------------------------------------------------------%
% 0.5 MHz
%------------------------------------------------------------------------%
s = FragData(1).Attenuation.kHz2250.RawData.pnb{1};
t = FragData(1).Attenuation.kHz2250.RawData.t;

idx_11dB = find(20*log10(abs(s)/max(abs(s)))>=-threshold);
pulseLength2250 = t(idx_11dB(end))-t(idx_11dB(1));

%------------------------------------------------------------------------%
% Find Fragments
%------------------------------------------------------------------------%
idx500 = [];
idx1000 = [];
idx2250 = [];
idx500Layers = [];
idx1000Layers = [];
idx2250Layers = [];
sk1 = [];
sk2 = [];

it = []
ot = []
md = []


% Remove 120M
idx_120M = findFragIdx(FragData,'2_120M');

for ii = 1:length(FragData)
    if ii == idx_120M && ~include120
        continue
    end
    c = mean(FragData(ii).Velocity.measuredVelocity);
    spatialPulseLength = pulseLength*c;
    spatialPulseLength1000 = pulseLength1000*c;
    spatialPulseLength2250 = pulseLength2250*c;
    if 0.5*spatialPulseLength <= FragData(ii).thickness
        idx500(end+1) = ii;
        if ~strcmp(FragData(ii).Layer,'Unknown')
            idx500Layers(end+1) = ii;
        end
    end
    
    if 0.5*spatialPulseLength1000 <= FragData(ii).thickness
        idx1000(end+1) = ii;
        if ~strcmp(FragData(ii).Layer,'Unknown')
            idx1000Layers(end+1) = ii;
        end
    end
    
    if 0.5*spatialPulseLength2250 <= FragData(ii).thickness
        idx2250(end+1) = ii;
        if ~strcmp(FragData(ii).Layer,'Unknown')
            idx2250Layers(end+1) = ii;
        end
    end
    
    if str2double(FragData(ii).oldFragName(1)) == 1
        sk1(end+1) = ii;
    end
    
    if str2double(FragData(ii).oldFragName(1)) == 2
        sk2(end+1) = ii;
    end
    
    if strcmp('Outer Table',FragData(ii).Layer)
        ot(end+1) = ii;
    elseif strcmp('Inner Table', FragData(ii).Layer)
        it(end+1) = ii;
    elseif strcmp('Trabecular', FragData(ii).Layer)
        md(end+1) = ii;
    end
end

disp('Fragment Thickness Results:')
disp(['    500 kHz: ', num2str(spatialPulseLength*1e3), ' mm'])
disp(['    1000 kHz: ', num2str(spatialPulseLength1000*1e3), ' mm'])
disp(['    2250 kHz: ', num2str(spatialPulseLength2250*1e3), ' mm'])